---
source: fmm/src/analysis/cps/source_function.rs
expression: "format::format_module(&transform_module(&Module::new(vec![], vec![], vec![],\n                        vec![FunctionDefinition ::\n                            new(\"f\", vec! [], types :: Primitive :: Float64, Block ::\n                            new(vec!\n                            [Call ::\n                            new(types :: Function ::\n                            new(vec! [], types :: Primitive :: Float64, types ::\n                            CallingConvention :: Source), Variable :: new(\"f\"), vec! [],\n                            \"x\",).into(), Load ::\n                            new(types :: Primitive :: Float64, Undefined ::\n                            new(types :: Pointer :: new(types :: Primitive :: Float64)),\n                            \"y\",).into(), Call ::\n                            new(types :: Function ::\n                            new(vec! [], types :: Primitive :: Float64, types ::\n                            CallingConvention :: Source), Variable :: new(\"f\"), vec! [],\n                            \"z\",).into()], Return ::\n                            new(types :: Primitive :: Float64, ArithmeticOperation ::\n                            new(types :: Primitive :: Float64, ArithmeticOperator ::\n                            Add, Variable :: new(\"y\"), Variable :: new(\"z\"))),), Default\n                            :: default())])).unwrap())"
---
(module
  (function f _s _k
    (block
      (load (record-address _s 0) _k_1)
      (load (record-address _s 1) _k_2)
      (if (== (size-of record) 0)
        (block
          (branch 0))
        (block
          (branch (* (+ (/ (- (size-of record) 1) (align-of pointer-integer)) 1) (align-of pointer-integer))))
        _k_3)
      (call _fmm_stack_extend _s _k_3 _k_4)
      (store (record _k) (bit-cast (pointer-address _k_1 _k_2)))
      (call f _s _k_5 _k_0)
      (return _k_0)))
  (function _k_b _s z
    (block
      (load (record-address _s 1) _k_d)
      (if (== (size-of record) 0)
        (block
          (branch 0))
        (block
          (branch (* (+ (/ (- (size-of record) 1) (align-of pointer-integer)) 1) (align-of pointer-integer))))
        _k_e)
      (store (- _k_d _k_e) (record-address _s 1))
      (load (record-address _s 0) _k_f)
      (load (record-address _s 1) _k_10)
      (load (bit-cast (pointer-address _k_f _k_10)) _k_11)
      (deconstruct-record _k_11 0 _k)
      (deconstruct-record _k_11 1 y)
      (call _k _s (+ y z) _k_c)
      (return _k_c)))
  (function _k_5 _s x
    (block
      (load (record-address _s 1) _k_12)
      (if (== (size-of record) 0)
        (block
          (branch 0))
        (block
          (branch (* (+ (/ (- (size-of record) 1) (align-of pointer-integer)) 1) (align-of pointer-integer))))
        _k_13)
      (store (- _k_12 _k_13) (record-address _s 1))
      (load (record-address _s 0) _k_14)
      (load (record-address _s 1) _k_15)
      (load (bit-cast (pointer-address _k_14 _k_15)) _k_16)
      (deconstruct-record _k_16 0 _k)
      (load undefined y)
      (load (record-address _s 0) _k_7)
      (load (record-address _s 1) _k_8)
      (if (== (size-of record) 0)
        (block
          (branch 0))
        (block
          (branch (* (+ (/ (- (size-of record) 1) (align-of pointer-integer)) 1) (align-of pointer-integer))))
        _k_9)
      (call _fmm_stack_extend _s _k_9 _k_a)
      (store (record _k y) (bit-cast (pointer-address _k_7 _k_8)))
      (call f _s _k_b _k_6)
      (return _k_6))))
