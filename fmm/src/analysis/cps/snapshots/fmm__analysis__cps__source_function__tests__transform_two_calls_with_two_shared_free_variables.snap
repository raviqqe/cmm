---
source: fmm/src/analysis/cps/source_function.rs
expression: "format::format_module(&transform_module(Module::new(vec![], vec![], vec![],\n                    vec![FunctionDefinition ::\n                        new(\"f\", vec!\n                        [Argument :: new(\"x\", types :: Primitive :: Float64),\n                        Argument :: new(\"y\", types :: Primitive :: Float64)], types\n                        :: Primitive :: Float64, Block ::\n                        new(vec!\n                        [Call ::\n                        new(types :: Function ::\n                        new(vec! [], types :: Primitive :: Float64, types ::\n                        CallingConvention :: Source), Variable :: new(\"f\"), vec! [],\n                        \"p\",).into(), Call ::\n                        new(types :: Function ::\n                        new(vec! [], types :: Primitive :: Float64, types ::\n                        CallingConvention :: Source), Variable :: new(\"f\"), vec! [],\n                        \"q\",).into()], Return ::\n                        new(types :: Primitive :: Float64, ArithmeticOperation ::\n                        new(types :: Primitive :: Float64, ArithmeticOperator ::\n                        Add, Variable :: new(\"x\"), Variable :: new(\"y\"))),), Default\n                        :: default())])).unwrap())"
---
(module
  (function f _s _k x y
    (block
      (call _fmm_stack_extend _s (size-of record) _k_1)
      (load (record-address _s 1) _k_2)
      (store (+ _k_2 (size-of record)) (record-address _s 1))
      (load (record-address _s 1) _k_3)
      (call _fmm_stack_align_size _k_3 (align-of pointer-integer) _k_4)
      (store _k_4 (record-address _s 1))
      (call f _s _k_10 _k_0)
      (return _k_0)))
  (function _k_b _s q
    (block
      (load (record-address _s 1) _k_c)
      (call _fmm_stack_align_size (size-of record) (align-of pointer-integer) _k_d)
      (store (- _k_c _k_d) (record-address _s 1))
      (load (record-address _s 0) _k_e)
      (load (bit-cast (pointer-address _k_e (- _k_c _k_d))) _k_f)
      (deconstruct-record _k_f 0 _k)
      (call _k _s (+ x y) _k_a)
      (return _k_a)))
  (function _k_10 _s p
    (block
      (load (record-address _s 1) _k_11)
      (call _fmm_stack_align_size (size-of record) (align-of pointer-integer) _k_12)
      (store (- _k_11 _k_12) (record-address _s 1))
      (load (record-address _s 0) _k_13)
      (load (bit-cast (pointer-address _k_13 (- _k_11 _k_12))) _k_14)
      (deconstruct-record _k_14 0 _k)
      (call _fmm_stack_extend _s (size-of record) _k_6)
      (load (record-address _s 1) _k_7)
      (store (+ _k_7 (size-of record)) (record-address _s 1))
      (load (record-address _s 1) _k_8)
      (call _fmm_stack_align_size _k_8 (align-of pointer-integer) _k_9)
      (store _k_9 (record-address _s 1))
      (call f _s _k_b _k_5)
      (return _k_5))))
