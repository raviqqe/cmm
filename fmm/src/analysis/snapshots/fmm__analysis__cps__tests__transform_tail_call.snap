---
source: fmm/src/analysis/cps.rs
expression: "format::format_module(&transform_module(Module::new(vec![],\n                vec![FunctionDeclaration :: new(\"f\", function_type.clone())],\n                vec![],\n                vec![create_function_definition(\"g\", vec! [], types ::\n                    Primitive :: Float64, Block ::\n                    new(vec!\n                    [Call ::\n                    new(function_type, Variable :: new(\"f\"), vec!\n                    [Primitive :: Float64(42.0).into()], \"x\",).into()], Return\n                    ::\n                    new(types :: Primitive :: Float64, Variable ::\n                    new(\"x\")),),)])))"
---
(module
  (function g _s _k
    (block
      (call f _s _k 42 _k_0)
      (return _k_0)))
  (function _fmm_stack_extend s e
    (block
      (load (record-address s 1) x0)
      (call _fmm_stack_align_size e (align-of pointer-integer) x1)
      (load (record-address s 2) x2)
      (if (> (+ x0 x1) x2)
        (block
          (load (record-address s 0) x3)
          (reallocate-heap x3 (* x2 2) x4)
          (store x4 (record-address s 0))
          (store (* x2 2) (record-address s 2))
          (branch (record)))
        (block
          (branch (record)))
        x5)
      (return (record))))
  (function _fmm_stack_align_size size alignment
    (block
      (if (== size 0)
        (block
          (branch 0))
        (block
          (branch (* (+ (/ (- size 1) alignment) 1) alignment)))
        x0)
      (return x0))))
