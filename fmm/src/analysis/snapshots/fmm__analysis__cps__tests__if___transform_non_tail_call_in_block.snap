---
source: fmm/src/analysis/cps.rs
expression: "format::format_module(&transform_module(Module::new(vec![],\n                vec![FunctionDeclaration :: new(\"f\", function_type.clone())],\n                vec![],\n                vec![create_function_definition(\"g\", vec! [], types ::\n                    Primitive :: Float64, Block ::\n                    new(vec!\n                    [If ::\n                    new(types :: Primitive :: Float64, Primitive ::\n                    Boolean(true), Block ::\n                    new(vec!\n                    [Call ::\n                    new(function_type, Variable :: new(\"f\"), vec!\n                    [Primitive :: Float64(42.0).into()], \"x\",).into()], Branch\n                    ::\n                    new(types :: Primitive :: Float64, Variable :: new(\"x\")),),\n                    Block :: new(vec! [], TerminalInstruction :: Unreachable),\n                    \"y\",).into()], Return ::\n                    new(types :: Primitive :: Float64, ArithmeticOperation ::\n                    new(types :: Primitive :: Float64, ArithmeticOperator ::\n                    Add, Variable :: new(\"y\"), Variable :: new(\"y\"))),),)])))"
---
(module
  (function g _s _k
    (block
      (if true
        (block
          (call _fmm_stack_extend _s (size-of record) _k_1)
          (load (record-address _s 1) _k_2)
          (store (+ _k_2 (size-of record)) (record-address _s 1))
          (load (record-address _s 1) _k_3)
          (call _fmm_stack_align_size _k_3 (align-of function) _k_4)
          (store _k_4 (record-address _s 1))
          (load (record-address _s 1) _k_5)
          (load (record-address _s 0) _k_6)
          (store _k (bit-cast (pointer-address _k_6 _k_5)))
          (load (record-address _s 1) _k_7)
          (store (+ _k_7 (size-of function)) (record-address _s 1))
          (load (record-address _s 1) _k_8)
          (call _fmm_stack_align_size _k_8 (align-of pointer-integer) _k_9)
          (store _k_9 (record-address _s 1))
          (call f _s _k_b 42 _k_0)
          (return _k_0))
        (block
          (unreachable))
        )
      (unreachable)))
  (function _k_b _s x
    (block
      (load (record-address _s 1) _k_c)
      (call _fmm_stack_align_size (size-of record) (align-of pointer-integer) _k_d)
      (store (- _k_c _k_d) (record-address _s 1))
      (load (record-address _s 0) _k_e)
      (load (bit-cast (pointer-address _k_e (- _k_c _k_d))) _k_f)
      (deconstruct-record _k_f 0 _k)
      (call _k _s (+ x x) _k_a)
      (return _k_a)))
  (function _fmm_stack_extend s e
    (block
      (load (record-address s 1) x0)
      (call _fmm_stack_align_size e (align-of pointer-integer) x1)
      (load (record-address s 2) x2)
      (if (> (+ x0 x1) x2)
        (block
          (load (record-address s 0) x3)
          (reallocate-heap x3 (* x2 2) x4)
          (store x4 (record-address s 0))
          (store (* x2 2) (record-address s 2))
          (branch (record)))
        (block
          (branch (record)))
        x5)
      (return (record))))
  (function _fmm_stack_align_size size alignment
    (block
      (if (== size 0)
        (block
          (branch 0))
        (block
          (branch (* (+ (/ (- size 1) alignment) 1) alignment)))
        x0)
      (return x0))))
