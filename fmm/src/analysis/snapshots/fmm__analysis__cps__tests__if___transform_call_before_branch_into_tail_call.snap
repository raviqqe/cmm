---
source: fmm/src/analysis/cps.rs
expression: "format::format_module(&transform(&Module::new(vec![],\n                        vec![FunctionDeclaration ::\n                            new(\"f\", function_type.clone())], vec![],\n                        vec![create_function_definition(\"g\", vec! [], types ::\n                            Primitive :: Float64, Block ::\n                            new(vec!\n                            [If ::\n                            new(types :: Primitive :: Float64, Primitive ::\n                            Boolean(true), Block ::\n                            new(vec!\n                            [Call ::\n                            new(function_type, Variable :: new(\"f\"), vec!\n                            [Primitive :: Float64(42.0).into()], \"x\",).into()], Branch\n                            ::\n                            new(types :: Primitive :: Float64, Variable :: new(\"x\")),),\n                            Block :: new(vec! [], TerminalInstruction :: Unreachable),\n                            \"y\",).into()], Return ::\n                            new(types :: Primitive :: Float64, Variable ::\n                            new(\"y\")),),)]), void_type()).unwrap())"
---
(module
  (function g _s _k
    (block
      (if true
        (block
          (call f _s _k 42 _k_0)
          (return _k_0))
        (block
          (unreachable))
        )
      (unreachable)))
  (function _fmm_stack_extend s e
    (block
      (load (record-address s 1) x0)
      (load (record-address s 2) x1)
      (if (> (+ x0 e) x1)
        (block
          (load (record-address s 0) x2)
          (reallocate-heap x2 (* x1 2) x3)
          (store x3 (record-address s 0))
          (store (* x1 2) (record-address s 2))
          (branch (record)))
        (block
          (branch (record)))
        x4)
      (store (+ x0 e) (record-address s 1))
      (return (record))))
  (function _fmm_stack_align_size size
    (block
      (if (== size 0)
        (block
          (branch 0))
        (block
          (branch (* (+ (/ (- size 1) (align-of pointer-integer)) 1) (align-of pointer-integer))))
        x0)
      (return x0))))
